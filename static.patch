--- glib/subprojects/proxy-libintl/libintl.h	2020-03-18 02:40:20.597449547 -0400
+++ glib/subprojects/proxy-libintl/libintl.h	2020-03-18 02:42:47.749209216 -0400
@@ -42,6 +42,7 @@
 #define bindtextdomain g_libintl_bindtextdomain
 #define bind_textdomain_codeset g_libintl_bind_textdomain_codeset
 
+#define G_INTL_STATIC_COMPILATION
 /* Define G_INTL_STATIC_COMPILATION to link statically */
 #if defined(_WIN32) && !defined(G_INTL_STATIC_COMPILATION)
 /* Export when producing library, import when linking against library */
--- glib/subprojects/libffi/include/ffi.h.in	2020-03-18 02:40:17.929455633 -0400
+++ glib/subprojects/libffi/include/ffi.h.in	2020-03-18 02:45:01.597144148 -0400
@@ -64,6 +64,7 @@
    the static version of the library, but don't worry about that.
    Besides, as a workaround, they can define FFI_BUILDING if they
    *know* they are going to link with the static library.  */
+#define FFI_STATIC_BUILD
 #if defined _WIN32 && !defined FFI_STATIC_BUILD
 #ifdef FFI_BUILDING
 #define FFI_EXTERN __declspec(dllexport)
--- glib/gobject/gtype.c	2020-03-11 08:21:39.000000000 -0400
+++ glib/gobject/gtype.c.new	2020-03-18 03:25:21.516184134 -0400
@@ -4456,7 +4456,7 @@
   _g_signal_init ();
 }
 
-#if defined (G_OS_WIN32)
+#if 0
 
 BOOL WINAPI DllMain (HINSTANCE hinstDLL,
                      DWORD     fdwReason,
